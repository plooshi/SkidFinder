// dllmain.cpp : Defines the entry point for the DLL application.
#include "pch.h"
#include "SDK.h"

uint64 KickPlayer()
{
    if (FNVer == 0) {
        auto OneDotEightAndLower = Memcury::Scanner::FindPattern(
            "40 53 56 48 81 EC ? ? ? ? 48 8B DA 48 8B F1 E8 ? ? ? ? 48 8B 06 48 8B CE"
        ).Get();
        if (OneDotEightAndLower)
            return OneDotEightAndLower;
    }

    if (std::floor(FNVer) == 18) {
        return Memcury::Scanner::FindPattern(
            "48 8B C4 48 89 58 08 48 89 70 10 48 89 78 18 4C 89 60 20 55 41 56 41 57 48 8B EC 48 83 EC 60 48 83 65 ? ? 4C 8B F2 83 65 E8 00 4C 8B E1 83 65 EC"
        ).Get();
    }

    if (std::floor(FNVer) == 19) {
        return Memcury::Scanner::FindPattern(
            "48 89 5C 24 ? 55 56 57 48 8B EC 48 83 EC 60 48 8B FA 48 8B F1 E8"
        ).Get();
    }

    if (FNVer >= 8.00 || FNVer <= 12.20) {
        return Memcury::Scanner::FindPattern(
            "48 89 5C 24 08 48 89 74 24 10 57 48 83 EC ? 49 8B F0 48 8B DA 48 85 D2"
        ).Get();
    }

    auto Addr = Memcury::Scanner::FindStringRef(
        L"Validation Failure: %s. kicking %s",
        false,
        0,
        FNVer >= 19
    ).Get();


    if (Addr) for (int i = 0; i < 2000; i++) {
        if (*(uint8_t*)(uint8_t*)(Addr - i) == 0x40 && *(uint8_t*)(uint8_t*)(Addr - i + 1) == 0x53) {
            return Addr - i;
        }
        else if (*(uint8_t*)(uint8_t*)(Addr - i) == 0x40 && *(uint8_t*)(uint8_t*)(Addr - i + 1) == 0x55) {
            return Addr - i;
        }
    }

    auto Addr2 = Memcury::Scanner::FindStringRef(L"Failed to kick player");
    auto Addrr = Addr2.Get();

    if (Addrr) for (int i = 0; i < 3000; i++) {
        if (*(uint8_t*)(uint8_t*)(Addrr - i) == 0x48 && *(uint8_t*)(uint8_t*)(Addrr - i + 1) == 0x89 &&
            *(uint8_t*)(uint8_t*)(Addrr - i + 2) == 0x5C) {
            return Addrr - i;
        }

        if (FNVer >= 17) {
            if (*(uint8_t*)(uint8_t*)(Addrr - i) == 0x48 && *(uint8_t*)(uint8_t*)(Addrr - i + 1) == 0x8B &&
                *(uint8_t*)(uint8_t*)(Addrr - i + 2) == 0xC4) {
                return Addrr - i;
            }
        }
    }

    return Memcury::Scanner::FindPattern(
        "40 53 41 56 48 81 EC ? ? ? ? 48 8B 01 48 8B DA 4C 8B F1 FF 90"
    ).Get();
}

uint64 FindGameSessionPatch()

{
    auto sRef = Memcury::Scanner::FindStringRef(L"Gamephase Step: %s", false).Get();
    uint64 Beginning = 0;

    if (!sRef) {
        Beginning = Memcury::Scanner::FindPattern(
            "48 89 5C 24 ? 57 48 83 EC 20 E8 ? ? ? ? 48 8B D8 48 85 C0 0F 84 ? ? ? ? E8"
        ).Get();

        if (!Beginning) return 0;
    }
    else {
        for (int i = 0; i < 3000; i++) {
            if (*(uint8_t*)(sRef - i) == 0x40 && *(uint8_t*)(sRef - i + 1) == 0x55) {
                Beginning = sRef - i;
                break;
            }

            if (*(uint8_t*)(sRef - i) == 0x48 && *(uint8_t*)(sRef - i + 1) == 0x89 &&
                *(uint8_t*)(sRef - i + 2) == 0x5C) {
                Beginning = sRef - i;
                break;
            }

            if (*(uint8_t*)(sRef - i) == 0x48 && *(uint8_t*)(sRef - i + 1) == 0x8B &&
                *(uint8_t*)(sRef - i + 2) == 0xC4) {
                Beginning = sRef - i;
                break;
            }
        }
    }

    if (!Beginning) return 0;

    for (int i = 0; i < 500; i++) {
        if (*(uint8_t*)(Beginning + i) == 0x0F && *(uint8_t*)(Beginning + i + 1) == 0x84) {
            return Beginning + i + 1;
        }
    }

    return 0;
}

static inline std::vector<uint64_t> NullFuncs = {};
static inline std::vector<uint64_t> RetTrueFuncs = {};

DWORD Main(LPVOID hModule) {
    AllocConsole();
    FILE* f;
    freopen_s(&f, "CONOUT$", "w", stdout);
    SetConsoleTitleA("SkidFinder - https://github.com/plooshi/SkidFinder");
    
    stringstream ss;
    ss << "// Generated by Sarah's Offset Finder\n// Fortnite version: ";
    ss << FNVer;
    ss << "\n#include <stdint.h>";
    ss << "\n#include <array>";

    ss << "\nnamespace SDK {\n    class UNetDriver;\n    class UObject;\n    class UClass;\n    class UField;\n    class FField;\n    class UEngine;\n    class FName;\n    struct FURL;\n    class UReplicationDriver;\n    class UWorld;\n    class AOnlineBeaconHost;\n};\nnamespace UC {\n    class FString;\n}\nclass FFrame;";
    ss << "\n\nnamespace Sarah {\n";
    ss << "    inline auto ImageBase = *(uint64_t*)(__readgsqword(0x60) + 0x10);\n";
    ss << "    namespace Offsets {\n";
    ss << hex;
    auto _AddOffset = [&](const char *Name, uint64_t Offset) {
        if (Offset) {
            ss << "        inline uint64_t " << Name << " = 0x" << Offset - (uint64_t)ImageBase << ";\n";
            Log(Name, ": ", hex, "0x", Offset - (uint64_t)ImageBase, dec);
        }
    };
#define AddOffset(_Nm) _AddOffset(#_Nm, _Nm);

    auto _AddVft = [&](const char* Name, uint32_t Idx) {
        ss << "        inline uint32_t " << Name << " = 0x" << Idx << ";\n";
        Log(Name, "Vft: ", hex, "0x", Idx, dec);
    };
#define AddVft(_Nm) _AddVft(#_Nm, _Nm);

    auto AddFunc = [&](const char *Ret, const char *Name, const char *Params) {
        ss << "        inline auto " << Name << " = (" << Ret << " (*)(" << Params << ")) (ImageBase + Offsets::" << Name << ");\n";
    };

    auto Step = Memcury::Scanner::FindPattern("48 8B 41 20 4C 8B D2 48 8B D1 44 0F B6 08 48 FF").Get();
    auto StepExplicitProperty = Memcury::Scanner::FindPattern("41 8B 40 ? 4D 8B C8").Get();
    AddOffset(Step);
    AddOffset(StepExplicitProperty);
    if (FNVer < 16.00) {
        auto CreateNetDriver = Memcury::Scanner::FindPattern("49 8B D8 48 8B F9 E8 ?? ?? ?? ?? 48 8B D0 4C 8B C3 48 8B CF 48 8B 5C 24 ?? 48 83 C4 ?? 5F E9 ?? ?? ?? ??").Get();
        if (!CreateNetDriver) {
            CreateNetDriver = Memcury::Scanner::FindPattern("E8 ?? ?? ?? ?? 4C 8B 44 24 ?? 48 8B D0 48 8B CB E8 ?? ?? ?? ?? 48 83 C4 ?? 5B C3").Get();
            if (!CreateNetDriver) CreateNetDriver = Memcury::Scanner::FindPattern("33 D2 E8 ?? ?? ?? ?? 48 8B D0 4C 8B C3 48 8B CF E8 ?? ?? ?? ?? 48 8B 5C 24 ?? 48 83 C4 ?? 5F C3").Get();
        }
        if (CreateNetDriver) {
            for (int i = 0; i < 0x50; i++) {
                auto Ptr = (uint8_t*)(CreateNetDriver - i);

                if (*Ptr == 0x48 && *(Ptr + 1) == 0x89 && *(Ptr + 2) == 0x5c) {
                    CreateNetDriver = uint64_t(Ptr);
                    break;
                }
                else if (*Ptr == 0x4C && *(Ptr + 1) == 0x89 && *(Ptr + 2) == 0x44) {
                    CreateNetDriver = uint64_t(Ptr);
                    break;
                }
            }
        }
        AddOffset(CreateNetDriver);
    }
    else {
        auto GetWorldContext = Memcury::Scanner::FindPattern("48 8B 81 ? ? ? ? 48 63 89 ? ? ? ? 4C 8D 04 C8 49 3B C0").Get();
        if (!GetWorldContext)
            GetWorldContext = Memcury::Scanner::FindPattern("40 53 48 83 ec ?? f6 41 08 10 48 8b d9 75 ?? 48 8b 41 20").Get();
        AddOffset(GetWorldContext);
        auto CreateNetDriverWorldContext = Memcury::Scanner::FindPattern("48 89 5c 24 ?? 44 89 44 24 ?? 55 56 57 41 56 41 57 48 83 ec ?? 48 63 81 ?? ?? ?? ??").Get();
        if (!CreateNetDriverWorldContext)
            CreateNetDriverWorldContext = Memcury::Scanner::FindPattern("48 89 5c 24 ?? 48 89 6c 24 ?? 4c 89 44 24 ?? 56 57 41 56 48 83 ec ?? 48 63 81 ?? ?? ?? ??").Get();
        AddOffset(CreateNetDriverWorldContext);
        auto InitHost = FNVer <= 19 ? Memcury::Scanner::FindPattern(FNVer == 18.10 ? "48 89 5C 24 ? 48 89 74 24 ? 55 57 41 56 48 8D 6C 24 ? 48 81 EC ? ? ? ? 48 8B F1 48 8D 1D ? ? ? ? 4C 8B C3 48 8D 4D D7 45" : "48 89 5C 24 ? 48 89 74 24 ? 55 57 41 56 48 8D 6C 24 ? 48 81 EC ? ? ? ? 48 8B F1 4C 8D 05").Get() : 0;
        if (!InitHost && FNVer != 18.10 && FNVer <= 19) InitHost = Memcury::Scanner::FindPattern("48 8B C4 48 89 58 10 48 89 70 18 48 89 78 20 55 41 56 41 57 48 8D 68 A1 48 81 EC ? ? ? ? 48 8B F1 4C 8D 35 ? ? ? ? 4D").Get();
        if (FNVer >= 19)
            InitHost = Memcury::Scanner::FindStringRef(L"BeaconPort=").ScanFor({ 0x48, 0x8b, 0xc4 }, false).Get();
        AddOffset(InitHost);
        auto PauseBeaconRequests = FNVer < 16.00 ? Memcury::Scanner::FindPattern("40 53 48 83 EC 30 48 8B ? 84 D2 74 ? 80 3D ? ? ? ? 06").Get() : 0;
        if (FNVer >= 16.00 && FNVer < 19.00) PauseBeaconRequests = Memcury::Scanner::FindPattern("48 89 5C 24 ? 48 89 74 24 ? 57 48 83 EC 30 33 F6 48 8B F9 84 D2 74").Get();
        else if (FNVer >= 19.00) PauseBeaconRequests = Memcury::Scanner::FindPattern("48 89 5C 24 ? 48 89 6C 24 ? 48 89 74 24 ? 57 48 83 EC 20 33 ED 48 8B F1 84 D2 74 27 80 3D").Get();
        AddOffset(PauseBeaconRequests);
    }
    uintptr_t InitListen = 0;
    if (FNVer >= 19)
        InitListen = Memcury::Scanner::FindPattern("4C 8B DC 49 89 5B 10 49 89 73 18 57 48 83 EC 50 48 8B BC 24 ?? ?? ?? ?? 49 8B F0 48 8B").Get();
    else if (FNVer >= 16.00)
        InitListen = Memcury::Scanner::FindPattern("4C 8B DC 49 89 5B 08 49 89 73 10 57 48 83 EC 50 48 8B BC 24 ? ? ? ? 49 8B F0 48 8B 01 48 8B").Get();
    else {
        auto sRef = Memcury::Scanner::FindStringRef(L"%s IpNetDriver listening on port %i").Get();
        int skip = 1;
        for (int i = 0; i < 2000; i++) {
            auto Ptr = (uint8_t*)(sRef - i);

            if (*Ptr == 0x48 && *(Ptr + 1) == 0x89 && *(Ptr + 2) == 0x5c) {
                if (skip > 0) {
                    skip--;
                    continue;
                }
                InitListen = uint64_t(Ptr);
                break;
            }
        }
    }
    AddOffset(InitListen);
    uintptr_t SetWorld = FNVer < 13 ? Memcury::Scanner::FindStringRef(L"AOnlineBeaconHost::InitHost failed").ScanFor({ 0x48, 0x8B, 0xD0, 0xE8 }, false).RelativeOffset(4).Get() : 0;
    if (FNVer >= 13) {
        auto Season = (int) floor(FNVer);
        uint32 VftIdx = 0;
        switch (Season) {
        case 13:
            VftIdx = 0x70;
            break;
        case 18:
            VftIdx = 0x73;
            break;
        case 19:
            VftIdx = 0x7a;
            break;
        case 20:
            VftIdx = 0x7b;
            break;
        case 21:
            VftIdx = 0x7c;
            break;
        default:
            if (FNVer >= 14 && FNVer <= 15.2) VftIdx = 0x71;
            else if (FNVer >= 15.3 && FNVer < 18) VftIdx = 0x72;
            break;
        }
        SetWorld = uintptr_t(GetDefaultObj<"NetDriver">()->Vft[VftIdx]);
    }
    AddOffset(SetWorld);
    auto GetNetMode = floor(FNVer) == 18 ? Memcury::Scanner::FindPattern("48 83 EC 28 48 83 79 ? ? 75 20 48 8B 91 ? ? ? ? 48 85 D2 74 1E 48 8B 02 48 8B CA FF 90").Get() : 0;
    if (floor(FNVer) != 18) {
        auto sRef = Memcury::Scanner::FindStringRef(L"PREPHYSBONES").Get();

        for (int i = 0; i < 1000; i++) {
            auto Ptr = (uint8_t*)(sRef - i);

            if (*Ptr == 0x40 && *(Ptr + 1) == 0x55) {
                GetNetMode = uint64_t(Ptr);
                break;
            }
        }

        for (int i = 0; i < 400; i++) {
            auto Ptr = (uint8_t*)(GetNetMode + i);

            if (*Ptr == 0xe8 && *(Ptr - 1) != 0x8b) {
                GetNetMode = uint64_t(Ptr);
                break;
            }
        }

        GetNetMode = Memcury::Scanner(GetNetMode).RelativeOffset(1).Get();
    }
    AddOffset(GetNetMode);

    auto TickFlush = FNVer == 0 ? Memcury::Scanner::FindPattern("4C 8B DC 55 49 8D AB ? ? ? ? 48 81 EC ? ? ? ? 45 0F 29 43 ? 45 0F 29 4B ? 48 8B 05 ? ? ? ? 48").Get() : 0;
    if (!TickFlush && FNVer == 0) TickFlush = Memcury::Scanner::FindPattern("4C 8B DC 55 53 56 57 49 8D AB ? ? ? ? 48 81 EC ? ? ? ? 41 0F 29 7B").Get();
    if (FNVer >= 16.00 && FNVer < 19) {
        TickFlush = Memcury::Scanner::FindPattern("48 8B C4 48 89 58 18 55 56 57 41 54 41 55 41 56 41 57 48 8D A8 ? ? ? ? 48 81 EC ? ? ? ? 0F 29 70 B8 0F 29 78 A8 48 8B 05 ? ? ? ? 48 33 C4 48 89 85 ? ? ? ? 8A").Get();
        if (!TickFlush) TickFlush = Memcury::Scanner::FindPattern("48 8B C4 48 89 58 18 55 56 57 41 54 41 55 41 56 41 57 48 8D A8 ? ? ? ? 48 81 EC ? ? ? ? 0F 29 70 B8 0F 29 78 A8 48 8B 05 ? ? ? ? 48 33 C4 48 89 85 ? ? ? ? 44 0F").Get();
        if (!TickFlush) TickFlush = Memcury::Scanner::FindPattern("48 8B C4 48 89 58 18 55 56 57 41 54 41 55 41 56 41 57 48 8D A8 ? ? ? ? 48 81 EC ? ? ? ? 0F 29 70 B8 0F 29 78 A8 48 8B 05 ? ? ? ? 48 33 C4 48 89 85 ? ? ? ? 48 8B F9 48 89 4D 38 48 8D 4D 40").Get();
    }
    else if (!TickFlush) {
        auto sRef = Memcury::Scanner::FindStringRef(L"STAT_NetTickFlush", false).Get();
        if (!sRef && FNVer >= 2.5 && FNVer <= 4.5)
            TickFlush = Memcury::Scanner::FindPattern("4C 8B DC 55 49 8D AB ? ? ? ? 48 81 EC ? ? ? ? 45 0F 29 43 ? 45 0F 29 4B ? 48 8B 05 ? ? ? ? 48").Get();
        else for (int i = 0; i < 1000; i++) {
            auto Ptr = (uint8_t*)(sRef - i);

            if (*Ptr == 0x48 && *(Ptr + 1) == 0x8b && *(Ptr + 2) == 0xc4) {
                TickFlush = uint64_t(Ptr);
                break;
            } else if (*Ptr == 0x4c && *(Ptr + 1) == 0x8b && *(Ptr + 2) == 0xdc) {
                TickFlush = uint64_t(Ptr);
                break;
            }
        }
    }
    AddOffset(TickFlush);

    int ServerReplicateActorsVft = 0;
    switch ((int) floor(FNVer)) {
    case 4:
        ServerReplicateActorsVft = 0x53;
        break;
    case 5:
        ServerReplicateActorsVft = 0x54;
        break;
    case 10:
    case 9:
    case 8:
    case 7:
        if (FNVer >= 7.40 && FNVer <= 8.40) 
            ServerReplicateActorsVft = 0x57;
        else
            ServerReplicateActorsVft = 0x56;
        break;
    case 11:
        if (FNVer >= 11 && FNVer <= 11.10) 
            ServerReplicateActorsVft = 0x57;
        else if (FNVer == 11.30 || FNVer == 11.31) 
            ServerReplicateActorsVft = 0x59;
        else 
            ServerReplicateActorsVft = 0x5a;
        break;
    case 12:
    case 13:
        ServerReplicateActorsVft = 0x5d;
        break;
    case 18:
    case 17:
    case 16:
    case 15:
    case 14:
        if (FNVer <= 15.2)
            ServerReplicateActorsVft = 0x5e;
        else 
            ServerReplicateActorsVft = 0x5f;
        break;
    case 19:
        ServerReplicateActorsVft = 0x66;
        break;
    }
    if (ServerReplicateActorsVft) {
        auto ServerReplicateActors = uint64_t(GetDefaultObj<"FortReplicationGraph">()->Vft[ServerReplicateActorsVft]);
        AddOffset(ServerReplicateActors);
    }

    auto GetMaxTickRate = FNVer >= 19 ? Memcury::Scanner::FindPattern("40 53 48 83 EC 50 0F 29 74 24 ? 48 8B D9 0F 29 7C 24 ? 0F 28 F9 44 0F 29").Get() : 0;
    if (FNVer >= 16.00 && FNVer < 19) GetMaxTickRate = Memcury::Scanner::FindPattern("40 53 48 83 EC 60 0F 29 74 24 ? 48 8B D9 0F 29 7C 24 ? 0F 28").Get();
    else if (FNVer < 16.00) {
        auto sRef = Memcury::Scanner::FindStringRef(L"Hitching by request!").Get();

        for (int i = 0; i < 1000; i++) {
            auto Ptr = (uint8_t*)(sRef - i);

            if (*Ptr == 0x40 && *(Ptr + 1) == 0x53) {
                GetMaxTickRate = uint64_t(Ptr);
                break;
            }
            else if (*Ptr == 0x48 && *(Ptr + 1) == 0x89 && *(Ptr + 2) == 0x5c) {
                GetMaxTickRate = uint64_t(Ptr);
                break;
            }
        }
    }
    AddOffset(GetMaxTickRate);
    uint64_t DispatchRequest = 0;
    auto sRef = Memcury::Scanner::FindStringRef(L"MCP-Profile: Dispatching request to %s", true, 0, FNVer >= 19).Get();
    if (!sRef)
        sRef = Memcury::Scanner::FindStringRef(L"MCP-Profile: Dispatching request to %s - ContextCredentials: %s", true, 0, FNVer >= 19).Get();

    for (int i = 0; i < 1000; i++) {
        auto Ptr = (uint8_t*)(sRef - i);

        if (*Ptr == 0x48 && *(Ptr + 1) == 0x89 && *(Ptr + 2) == 0x5c) {
            DispatchRequest = uint64_t(Ptr);
            break;
        } else if (*Ptr == 0x48 && *(Ptr + 1) == 0x8b && *(Ptr + 2) == 0xc4) {
            DispatchRequest = uint64_t(Ptr);
            break;
        }
    }
    AddOffset(DispatchRequest);
    auto Realloc = Memcury::Scanner::FindPattern("48 89 5C 24 08 48 89 74 24 10 57 48 83 EC ? 48 8B F1 41 8B D8 48 8B 0D ? ? ? ?").Get();
    AddOffset(Realloc);
    uint64_t StaticFindObject;
    if (FNVer >= 19) {
        StaticFindObject = Memcury::Scanner::FindPattern("40 55 53 56 57 41 54 41 55 41 56 41 57 48 8D AC 24 ? ? ? ? 48 81 EC ? ? ? ? 48 8B 05 ? ? ? ? 48 33 C4 48 89 85 ? ? ? ? 45 33 F6 4C 8B E1 45 0F B6 E9 49 8B F8 41 8B C6", false).Get();
        if (!StaticFindObject) StaticFindObject = Memcury::Scanner::FindPattern("48 89 5C 24 ? 48 89 74 24 ? 4C 89 64 24 ? 55 41 55 41 57 48 8B EC 48 83 EC 60 45 8A E1 4C 8B E9 48 83 FA").Get();
    }
    else if (FNVer >= 16.00) {
        if (floor(FNVer) == 18)
            StaticFindObject = Memcury::Scanner::FindPattern("48 89 5C 24 ? 48 89 74 24 ? 48 89 7C 24 ? 55 41 54 41 55 41 56 41 57 48 8B EC 48 83 EC 60 45 33 ED 45 8A F9 44 38 2D ? ? ? ? 49 8B F8 48 8B").Get();
        else if (FNVer == 16.50)
            StaticFindObject = Memcury::Scanner::FindPattern("48 89 5C 24 ? 48 89 74 24 ? 48 89 7C 24 ? 55 41 54 41 55 41 56 41 57 48 8B EC 48 83 EC 60 45 33 ED 45 8A F9 44 38 2D ? ? ? ? 49 8B F8 48 8B F2 4C 8B E1").Get();
        else
            StaticFindObject = Memcury::Scanner::FindPattern("40 55 53 57 41 54 41 55 41 57 48 8D AC 24 ? ? ? ? 48 81 EC ? ? ? ? 48 8B 05 ? ? ? ? 48 33 C4 48 89 85").Get();
    }
    else if (FNVer == 0) {
        StaticFindObject = Memcury::Scanner::FindPattern("48 89 5C 24 ? 48 89 74 24 ? 55 57 41 54 41 56 41 57 48 8B EC 48 83 EC 60 80 3D ? ? ? ? ? 45 0F B6 F1 49 8B F8").Get();
        if (!StaticFindObject) {
            StaticFindObject = Memcury::Scanner::FindPattern("4C 8B DC 49 89 5B 08 49 89 6B 18 49 89 73 20 57 41 56 41 57 48 83 EC 60 80 3D").Get();
            if (!StaticFindObject)
                StaticFindObject = Memcury::Scanner::FindPattern("4C 8B DC 57 48 81 EC ? ? ? ? 80 3D ? ? ? ? ? 49 89 6B F0 49 89 73 E8").Get();
        }
    }
    else {
        auto sRef = Memcury::Scanner::FindStringRef(L"Illegal call to StaticFindObject() while serializing object data!", false, 1).Get();

        for (int i = 0; i < 1000; i++) {
            auto Ptr = (uint8_t*)(sRef - i);

            if (*Ptr == 0x48 && *(Ptr + 1) == 0x89 && *(Ptr + 2) == 0x5c) {
                StaticFindObject = uint64_t(Ptr);
                break;
            }
        }
    }
    AddOffset(StaticFindObject);
    sRef = Memcury::Scanner::FindStringRef(L"STAT_LoadObject").Get();
    uint64_t StaticLoadObject = 0;
    if (!sRef) {
        sRef = Memcury::Scanner::FindStringRef(L"Calling StaticLoadObject during PostLoad may result in hitches during streaming.").Get();
        for (int i = 0; i < 1000; i++) {
            auto Ptr = (uint8_t*)(sRef - i);
            if (*Ptr == 0x40 && *(Ptr + 1) == 0x55) {
                StaticLoadObject = uint64_t(Ptr);
                break;
            }
        }
    }
    else {
        for (int i = 0; i < 1000; i++) {
            auto Ptr = (uint8_t*)(sRef - i);

            if (*Ptr == 0x4c && *(Ptr + 1) == 0x89 && *(Ptr + 2) == 0x4c) {
                StaticLoadObject = uint64_t(Ptr);
                break;
            }
            else if (*Ptr == 0x48 && *(Ptr + 1) == 0x8b && *(Ptr + 2) == 0xc4) {
                StaticLoadObject = uint64_t(Ptr);
                break;
            }
        }
    }
    AddOffset(StaticLoadObject);

    std::vector<std::vector<uint8_t>> GIsClientLoads = {
        {0x88, 0x05},
        {0xC6, 0x05},
        {0x88, 0x1D},
        {0x44, 0x88}
    };

    sRef = Memcury::Scanner::FindStringRef(L"AllowCommandletRendering").Get();

    int Skip = 2;
    uint8_t correctByte = 0;
    for (int i = 0; i < 50; i++) {
        auto Ptr = (uint8_t*)(sRef - i);

        for (auto& Load : GIsClientLoads) {
            bool bMatches = true;
            for (int x = 0; x < Load.size(); x++) {
                if (Load[x] != *(Ptr + x)) {
                    bMatches = false;
                    break;
                }
            }
            if (!bMatches) continue;
            if (Load[0] == 0x44 && *(Ptr + 2) == 0x74) continue;
            if (!correctByte)
                correctByte = Load[0];
            else if (Load[0] != correctByte)
                continue;
            if (Skip > 0) {
                Skip--;
                continue;
            }

            auto GIsClient = Memcury::Scanner(Ptr).RelativeOffset(Load[0] == 0x44 ? 3 : 2, Load[0] == 0xc6).Get();
            AddOffset(GIsClient);
            goto _End;
        }
    }
_End:
    auto GameSessionPatch = FindGameSessionPatch();
    AddOffset(GameSessionPatch);

    auto EncryptionPatchPoint = Memcury::Scanner::FindPattern("83 BD ? ? ? ? 01 7F 18 49 8D 4D D8 48 8B D6 E8 ? ? ? ? 48", false).Get();
    if (!EncryptionPatchPoint)
        EncryptionPatchPoint = Memcury::Scanner::FindPattern("83 7D 88 01 7F 0D 48 8B CE E8", false).Get();
    if (!EncryptionPatchPoint)
        EncryptionPatchPoint = Memcury::Scanner::FindPattern("83 7C 24 ?? 01 7F 0D 48 8B CF E8", false).Get();
    if (!EncryptionPatchPoint)
        EncryptionPatchPoint = Memcury::Scanner::FindPattern("83 BD ? ? ? ? ? 7F 18 49 8D 4D D8 48 8B D7 E8").Get();

    uint64_t EncryptionPatch = 0;
    if (EncryptionPatchPoint) for (int i = 0; i < 8; i++) {
        if (*(uint8_t*)(EncryptionPatchPoint + i) == 0x7f)
            EncryptionPatch = EncryptionPatchPoint + i;
    }
    AddOffset(EncryptionPatch);

    if (FNVer == 0) NullFuncs.push_back(Memcury::Scanner::FindPattern("48 89 54 24 ? 48 89 4C 24 ? 55 53 57 48 8D 6C 24 ? 48 81 EC ? ? ? ? 8B 41 08 C1 E8 05").Get());
    else if (FNVer >= 3.3 && FNVer <= 4.5) {
        if (FNVer == 4.1) NullFuncs.push_back(Memcury::Scanner::FindPattern("4C 8B DC 55 49 8D AB ? ? ? ? 48 81 EC ? ? ? ? 48 8B 05 ? ? ? ? 48 33 C4 48 89 85 ? ? ? ? 49 89 5B 10 48 8D 05 ? ? ? ? 48 8B 1D ? ? ? ? 49 89 73 18 33 F6 40").Get());
        NullFuncs.push_back(Memcury::Scanner::FindPattern("48 8B C4 57 48 81 EC ? ? ? ? 4C 8B 82 ? ? ? ? 48 8B F9 0F 29 70 E8 0F 29 78 D8").Get());
    }
    else if (FNVer >= 5.00 && FNVer < 7.00) {
        NullFuncs.push_back(Memcury::Scanner::FindPattern("48 8B C4 48 89 58 08 48 89 70 10 57 48 81 EC ? ? ? ? 48 8B BA ? ? ? ? 48 8B DA 0F 29").Get());
        NullFuncs.push_back(Memcury::Scanner::FindStringRef(L"Widget Class %s - Running Initialize On Archetype, %s.").ScanFor(FNVer < 6.3 ? std::vector<uint8_t>{ 0x40, 0x55 } : std::vector<uint8_t>{ 0x48, 0x89, 0x5C }, false).Get());
    }
    else if (FNVer >= 7.00 && FNVer <= 12.00) NullFuncs.push_back(Memcury::Scanner::FindPattern("48 89 5C 24 ? 57 48 83 EC 30 48 8B 41 28 48 8B DA 48 8B F9 48 85 C0 74 34 48 8B 4B 08 48 8D").Get());
    else if (FNVer >= 12.21 && FNVer < 13.00) {
        NullFuncs.push_back(Memcury::Scanner::FindStringRef(L"Widget Class %s - Running Initialize On Archetype, %s.").ScanFor(std::vector<uint8_t>{ 0x48, 0x89, 0x5C }, false).Get()); // for 12.41
        NullFuncs.push_back(Memcury::Scanner::FindPattern(FNVer == 12.41 ? "40 57 41 56 48 81 EC ? ? ? ? 80 3D ? ? ? ? ? 0F B6 FA 44 8B F1 74 3A 80 3D ? ? ? ? ? 0F" : "40 57 41 56 48 81 EC ? ? ? ? 80 3D ? ? ? ? ? 0F B6 FA 44 8B F1 74 3A 80 3D ? ? ? ? ? 0F 82").Get());
        if (FNVer == 12.41) NullFuncs.push_back(Memcury::Scanner::FindPattern("48 8B C4 48 89 58 08 48 89 68 10 48 89 70 18 48 89 78 20 41 54 41 56 41 57 48 83 EC 70 48 8B 35").Get());
        else if (FNVer == 12.61) NullFuncs.push_back(Memcury::Scanner::FindPattern("48 89 5C 24 ? 55 57 41 54 41 56 41 57 48 8D 6C 24 ? 48 81 EC ? ? ? ? 48 8B 05 ? ? ? ? 48 33 C4 48 89 45 20 4C 8B A5").Get());
    }
    else if (FNVer == 14.60) NullFuncs.push_back(Memcury::Scanner::FindPattern("40 55 57 41 57 48 8D 6C 24 ? 48 81 EC ? ? ? ? 80 3D ? ? ? ? ? 0F B6 FA 44 8B F9 74 3B 80 3D ? ? ? ? ? 0F").Get());
    else if (FNVer >= 17.00) {
        NullFuncs.push_back(Memcury::Scanner::FindPattern("48 89 5C 24 10 48 89 6C 24 20 56 57 41 54 41 56 41 57 48 81 EC ? ? ? ? 65 48 8B 04 25 ? ? ? ? 4C 8B F9").Get());
        if (std::floor(FNVer) == 17) NullFuncs.push_back(Memcury::Scanner::FindPattern("48 8B C4 48 89 70 08 48 89 78 10 55 41 54 41 55 41 56 41 57 48 8D 68 A1 48 81 EC ? ? ? ? 45 33 ED").Get());
        else if (FNVer >= 19.00) NullFuncs.push_back(Memcury::Scanner::FindPattern("48 89 5C 24 ? 48 89 74 24 ? 48 89 7C 24 ? 55 41 55 41 56 48 8B EC 48 83 EC 50 83 65 28 00 40 B6 05 40 38 35 ? ? ? ? 4C").Get());
        else if (FNVer >= 20.00) {
            NullFuncs.push_back(Memcury::Scanner::FindPattern("48 8B C4 48 89 58 08 4C 89 40 18 48 89 50 10 55 56 57 41 54 41 55 41 56 41 57 48 8D 68 98 48 81 EC ? ? ? ? 49 8B 48 20 45 33").Get());
            NullFuncs.push_back(Memcury::Scanner::FindPattern("48 89 5C 24 ? 57 48 83 EC 20 48 8B 41 20 48 8B FA 48 8B D9 BA ? ? ? ? 83 78 08 03 0F 8D").Get());
            NullFuncs.push_back(Memcury::Scanner::FindPattern("4C 89 44 24 ? 53 55 56 57 41 54 41 55 41 56 41 57 48 83 EC 68 48 8D 05 ? ? ? ? 0F").Get());
            NullFuncs.push_back(Memcury::Scanner::FindPattern("48 89 5C 24 ? 48 89 6C 24 ? 48 89 74 24 ? 57 48 83 EC 30 48 8B F9 48 8B CA E8").Get());
            NullFuncs.push_back(Memcury::Scanner::FindPattern("48 89 5C 24 ? 48 89 6C 24 ? 48 89 74 24 ? 57 41 ? 41 ? 48 83 EC 60 45 33 F6 4C 8D ? ? ? ? ? 48 8B DA").Get());
        }
    }

    if (FNVer >= 19.00) NullFuncs.push_back(Memcury::Scanner::FindPattern("48 89 5C 24 ? 55 56 57 41 54 41 55 41 56 41 57 48 8B EC 48 83 EC 50 4C 8B FA 48 8B F1 E8").Get());
    else if (FNVer >= 16.40) NullFuncs.push_back(Memcury::Scanner::FindPattern("48 89 5C 24 ? 48 89 74 24 ? 48 89 7C 24 ? 55 41 54 41 55 41 56 41 57 48 8B EC 48 83 EC 70 4C 8B FA 4C").Get());
    else if (FNVer == 0) NullFuncs.push_back(Memcury::Scanner::FindPattern("40 55 56 41 56 48 8B EC 48 81 EC ? ? ? ? 48 8B 01 4C 8B F2").Get());
    else {
        auto sRef = Memcury::Scanner::FindStringRef(L"Changing GameSessionId from '%s' to '%s'");
        NullFuncs.push_back(sRef.ScanFor({ 0x40, 0x55 }, false, 0, 1, 2000).Get());
    }
    if (FNVer < 16.40) {
        auto Addr = Memcury::Scanner::FindStringRef(L"STAT_CollectGarbageInternal").Get();
        uint64_t CollectGarbage = 0;

        for (int i = 0; i < 1000; i++) {
            auto Ptr = (uint8_t*)(sRef - i);

            if (*Ptr == 0x48 && *(Ptr + 1) == 0x89 && *(Ptr + 2) == 0x5c) {
                CollectGarbage = uint64_t(Ptr);
                break;
            } else if (*Ptr == 0x40 && *(Ptr + 1) == 0x55) {
                CollectGarbage = uint64_t(Ptr);
                break;
            }
        }
        NullFuncs.push_back(CollectGarbage);
    }

    NullFuncs.push_back(KickPlayer());
    if (FNVer == 0) RetTrueFuncs.push_back(Memcury::Scanner::FindPattern("48 89 5C 24 ? 48 89 6C 24 ? 57 41 56 41 57 48 81 EC ? ? ? ? 48 8B 01 49 8B E9 45 0F B6 F8").Get());
    else if (FNVer >= 16.40) {
        if (std::floor(FNVer) == 17) RetTrueFuncs.push_back(Memcury::Scanner::FindPattern("48 8B C4 48 89 58 08 48 89 70 10 48 89 78 18 4C 89 60 20 55 41 56 41 57 48 8B EC 48 83 EC 60 4D 8B F9 41 8A F0 4C 8B F2 48 8B F9 45 32 E4").Get());
        RetTrueFuncs.push_back(Memcury::Scanner::FindPattern("48 8B C4 48 89 58 08 48 89 70 10 48 89 78 18 4C 89 60 20 55 41 56 41 57 48 8B EC 48 83 EC 60 49 8B D9 45 8A").Get());
    }

    ss << "        inline std::array<uint64_t, " << NullFuncs.size() << "> NullFuncs = { ";
    for (int i = 0; i < NullFuncs.size(); i++) {
        auto& NullFunc = NullFuncs[i];
        if (!NullFunc) continue;
        ss << "0x" << NullFunc - (uint64_t)ImageBase << (i == NullFuncs.size() - 1 ? "" : ", ");
    }
    ss << " };\n";
    ss << "        inline std::array<uint64_t, " << RetTrueFuncs.size() << "> RetTrueFuncs = { ";
    for (int i = 0; i < RetTrueFuncs.size(); i++) {
        auto& RetTrueFunc = RetTrueFuncs[i];
        if (!RetTrueFunc) continue;
        ss << "0x" << RetTrueFunc - (uint64_t)ImageBase << (i == RetTrueFuncs.size() - 1 ? "" : ", ");
    }
    ss << " };\n";


    ss << "    };\n\n    namespace Vfts {\n";

    ss << "    };\n\n    namespace Funcs {\n";
    AddFunc("void", "Step", "FFrame*, SDK::UObject*, void* const");
    AddFunc("void", "StepExplicitProperty", (string("FFrame*, void* const, ") + "SDK::" + (FNVer >= 12.10 ? "F" : "U") + "Field*").c_str());
    if (FNVer < 16.00) {
        AddFunc("SDK::UNetDriver*", "CreateNetDriver", "SDK::UEngine*, SDK::UWorld*, SDK::FName");
    }
    else {
        AddFunc("bool", "InitHost", "SDK::AOnlineBeaconHost*");
        AddFunc("void", "PauseBeaconRequests", "SDK::AOnlineBeaconHost*, bool");
    }
    AddFunc("bool", "InitListen", "SDK::UNetDriver*, SDK::UWorld*, SDK::FURL&, bool, UC::FString&");
    AddFunc("void", "SetWorld", "SDK::UNetDriver*, SDK::UWorld*");
    if (ServerReplicateActorsVft) 
        AddFunc("void", "ServerReplicateActors", "SDK::UReplicationDriver*, float");
    AddFunc("void*", "Realloc", "void*, __int64, unsigned int");
    AddFunc("SDK::UObject*", "StaticFindObject", "SDK::UClass*, SDK::UObject*, const wchar_t*, bool");
    AddFunc("SDK::UObject*", "StaticLoadObject", "SDK::UClass*, SDK::UObject*, const wchar_t*, const wchar_t*, uint32_t, SDK::UObject*, bool");
    ss << "    };\n};\n";
    ss << "using namespace Sarah;\nusing namespace Sarah::Offsets;\nusing namespace Sarah::Vfts;\nusing namespace Sarah::Funcs;\n";
    std::cout << ss.str();
    FreeLibraryAndExitThread((HMODULE)hModule, 0);
    return 0;
}

BOOL APIENTRY DllMain(HMODULE hModule, DWORD ul_reason_for_call, LPVOID)
{
    if (ul_reason_for_call == DLL_PROCESS_ATTACH) CreateThread(0, 0, Main, hModule, 0, 0);
    return TRUE;
}
